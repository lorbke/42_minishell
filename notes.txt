 
----------requirements----------

General:
• Have a working history.
• Search and launch the right executable (based on the PATH variable or using a
relative or an absolute path).
• Not use more than one global variable. Think about it. You will have to explain
its purpose.

Special characters:
• Not interpret unclosed quotes or special characters which are not required by the
subject such as \ (backslash) or ; (semicolon).
• Handle ’ (single quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence.
• Handle " (double quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence except for $ (dollar sign).
• Implement pipes (| character).

Redirections:
◦ < should redirect input.
◦ > should redirect output.
◦ << should be given a delimiter (heredoc)
◦ >> should redirect output in append mode.

Variables:
• Handle environment variables ($ followed by a sequence of characters) which
should expand to their values.
• Handle $? which should expand to the exit status of the most recently executed
foreground pipeline.

Signals:
• Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
◦ ctrl-C displays a new prompt on a new line.
◦ ctrl-D exits the shell.
◦ ctrl-\ does nothing.

Builtins:
◦ echo with option -n
◦ cd with only a relative or absolute path
◦ pwd with no options
◦ export with no options
◦ unset with no options
◦ env with no options or arguments
◦ exit with no options

Bonus:
• && and || with parenthesis for priorities.
• Wildcards * should work for the current working directory.

----------approach-------------

- learn how the shell works
- what is the frame of minishell, what is included and what not
	- look at the tester
	- look at allowed functions



---------functions---------------

- readline
	read a line from stdin
- rl_clear_history
	clears history list
- rl_on_new_line
	Tell the update functions that we have moved onto a new (empty) line, usually after outputting a newline.
- rl_replace_line
	Replace the contents of rl_line_buffer with text. The point and mark are preserved, if possible. If clear_undo is non-zero, the undo list associated with the current line is cleared.
- rl_redisplay
	Change what’s displayed on the screen to reflect the current contents of rl_line_buffer.
- add_history
	adds a line to history



----------logic-------------

- parser 
	- lexical analyser takes input and puts it together into tokens
	- processes tokens according to grammar and stores them in the command table
- executor
- shell subsystems
	- environment variables
	- wildcards
